<?php
/**
 * InlineResponse2004DataLists
 *
 * PHP version 5
 *
 * @category Class
 * @package  ListcleanSwagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Listclean API (Beta)
 *
 * Listclean APIs. For API reference doc at [https://api.listclean.xyz](https://api.listclean.xyz).
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@listclean.xyz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ListcleanSwagger\Client\Model;

use \ArrayAccess;
use \ListcleanSwagger\Client\ObjectSerializer;

/**
 * InlineResponse2004DataLists Class Doc Comment
 *
 * @category Class
 * @package  ListcleanSwagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2004DataLists implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_4_data_lists';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'list_id' => 'int',
        'filename' => 'string',
        'size_in_bytes' => 'int',
        'request_time' => 'string',
        'status' => 'string',
        'upload_id' => 'string',
        'analytics' => '\ListcleanSwagger\Client\Model\InlineResponse2004DataAnalytics',
        'cost' => '\ListcleanSwagger\Client\Model\InlineResponse2004DataCost'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'list_id' => 'int32',
        'filename' => null,
        'size_in_bytes' => 'int32',
        'request_time' => null,
        'status' => null,
        'upload_id' => null,
        'analytics' => null,
        'cost' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'list_id' => 'list_id',
        'filename' => 'filename',
        'size_in_bytes' => 'size_in_bytes',
        'request_time' => 'request_time',
        'status' => 'status',
        'upload_id' => 'upload_id',
        'analytics' => 'analytics',
        'cost' => 'cost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'list_id' => 'setListId',
        'filename' => 'setFilename',
        'size_in_bytes' => 'setSizeInBytes',
        'request_time' => 'setRequestTime',
        'status' => 'setStatus',
        'upload_id' => 'setUploadId',
        'analytics' => 'setAnalytics',
        'cost' => 'setCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'list_id' => 'getListId',
        'filename' => 'getFilename',
        'size_in_bytes' => 'getSizeInBytes',
        'request_time' => 'getRequestTime',
        'status' => 'getStatus',
        'upload_id' => 'getUploadId',
        'analytics' => 'getAnalytics',
        'cost' => 'getCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_COMPLETED = 'COMPLETED';
    const STATUS_INPROCESS = 'INPROCESS';
    const STATUS_SUBMITTED = 'SUBMITTED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_INPROCESS,
            self::STATUS_SUBMITTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['list_id'] = isset($data['list_id']) ? $data['list_id'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['size_in_bytes'] = isset($data['size_in_bytes']) ? $data['size_in_bytes'] : null;
        $this->container['request_time'] = isset($data['request_time']) ? $data['request_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['upload_id'] = isset($data['upload_id']) ? $data['upload_id'] : null;
        $this->container['analytics'] = isset($data['analytics']) ? $data['analytics'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets list_id
     *
     * @return int
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     *
     * @param int $list_id list_id
     *
     * @return $this
     */
    public function setListId($list_id)
    {
        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename Filename of list uploaded
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets size_in_bytes
     *
     * @return int
     */
    public function getSizeInBytes()
    {
        return $this->container['size_in_bytes'];
    }

    /**
     * Sets size_in_bytes
     *
     * @param int $size_in_bytes size_in_bytes
     *
     * @return $this
     */
    public function setSizeInBytes($size_in_bytes)
    {
        $this->container['size_in_bytes'] = $size_in_bytes;

        return $this;
    }

    /**
     * Gets request_time
     *
     * @return string
     */
    public function getRequestTime()
    {
        return $this->container['request_time'];
    }

    /**
     * Sets request_time
     *
     * @param string $request_time Uploaded time
     *
     * @return $this
     */
    public function setRequestTime($request_time)
    {
        $this->container['request_time'] = $request_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status List status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets upload_id
     *
     * @return string
     */
    public function getUploadId()
    {
        return $this->container['upload_id'];
    }

    /**
     * Sets upload_id
     *
     * @param string $upload_id upload_id
     *
     * @return $this
     */
    public function setUploadId($upload_id)
    {
        $this->container['upload_id'] = $upload_id;

        return $this;
    }

    /**
     * Gets analytics
     *
     * @return \ListcleanSwagger\Client\Model\InlineResponse2004DataAnalytics
     */
    public function getAnalytics()
    {
        return $this->container['analytics'];
    }

    /**
     * Sets analytics
     *
     * @param \ListcleanSwagger\Client\Model\InlineResponse2004DataAnalytics $analytics analytics
     *
     * @return $this
     */
    public function setAnalytics($analytics)
    {
        $this->container['analytics'] = $analytics;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return \ListcleanSwagger\Client\Model\InlineResponse2004DataCost
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param \ListcleanSwagger\Client\Model\InlineResponse2004DataCost $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


